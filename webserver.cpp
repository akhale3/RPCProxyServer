// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "server.h"
//#include "numberoflines.h"
extern "C" {
  #include "webcurl.h"
}
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <string.h>
#include "lrucache.h"
#include <fstream>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::serverns;

class serverHandler : virtual public serverIf {
 public:
  serverHandler() {
    // Your initialization goes here
  }

  void getHtml(std::string& _return) {
    // Your implementation goes here
    //hash_map<string, string> map;
    //map[9]= 999;
    //cout << map[9] << "\n";
    //cout << map[10] << "\n";
  //  int size= get_numberoflines();
    Cache<char *, char *> lru_cache(10);
    //lru_cache.Put("http://localhost/", "test");
    // lru_cache.Put(1, "one");
    // cout << lru_cache.Get(1) << endl;

    // if(lru_cache.Get(2) == "")
    //   lru_cache.Put(2, "two");
    //cout << "Before" << "\n";
    
    char * url = "http://localhost/";
    std::string line;
    std::ifstream myfile("urllist.txt");
//    while(std::getline(myfile,line))
//{
//    char *url = line; 
    if(!lru_cache.search_cache(url))
    {
      cout << "Entry not in cache" << "\n";
      char * webPage = getWebPage(url);
      std::string body(webPage);
      lru_cache.insert_into_cache(url, webPage);
      _return.assign(body);
    }
    else
    {
      cout << "Entry in cache" << "\n";
      std::string body(lru_cache.search_cache(url));
      _return.assign(body);
    }
    //cout << "Test LRU: " << lru_cache.Get("http://localhost/") << "\n";
//}    //cout << "After" << "\n";
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<serverHandler> handler(new serverHandler());
  shared_ptr<TProcessor> processor(new serverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();

  return 0;
}

